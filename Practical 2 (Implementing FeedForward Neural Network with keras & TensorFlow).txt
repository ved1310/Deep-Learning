# Step 1: Import The Necessary Packages

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import random

# Step 2: Load The Training And Testing Data

mnist=tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()

x_train=x_train/255
x_test=x_test/255

# Steps 3: Define the Neural Architechture Using 

model=keras.Sequential([
keras.layers.Flatten(input_shape=(28,28)),
keras.layers.Dense(128,activation='relu'),
keras.layers.Dense(10,activation='softmax')
])
model.summary()

# Step 4: Train the  Model Using sgd
model.compile(optimizer='sgd',loss="sparse_categorical_crossentropy",metrics=['accuracy'])
history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=3)

# Step 5: Evaluate The Network

test_loss,test_acc=model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)

#Random
n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()

#predicted value
predicted_value=model.predict(x_test)
print("predicted_value: ",predicted_value[n])

#Step 6: Plot the Training Loss And Accuracy

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("Accuracy Model")
plt.xlabel("epochs")
plt.ylabel("Accuracy")
plt.legend(['Train','Validation'],loc='upper right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("Loss Model")
plt.xlabel("epochs")
plt.ylabel("loss")
plt.legend(['Train','Validation'],loc='upper right')
plt.show()


