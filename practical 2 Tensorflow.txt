#import the l=pacakges

import tensorflow as tf
from tensorflow import keras
import matplotlab.pyplot as plt
import random

#load the training and testing data

mnist=tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mninst.load_data()
x_train=x_train/255
y_train=y_train/255

#Define the network architechture

model=keras.Sequential([
keras.layers.Flatten(inout_shape=(28,28))
keras.layers.Dense(128,activation="relur")
keras.layers.Dense(10,activation="softmax")
])
model.summary()

#Train the model using sgd

model.compile(optimizer="sgd",loss="sparse_categorical_crossentropy",metrics=['accuracy'])
history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=3)

#Evaluate the network

test_loss,test_acc=model.evaluate(x_test,y_test)
print("loss%.3f" %test_acc)
n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()
predicted_value=model.predict(x_test)
plt.imshow(x_test[n])
plt.show()
print("predicted value:",predicted_value[n])

#Plot the training loss
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train','validation'],loc='upper right')
plt.show()

#plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model accuracy')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train','validation'],loc='upper right')
plt.show()

